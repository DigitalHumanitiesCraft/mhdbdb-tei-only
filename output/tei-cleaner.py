#!/usr/bin/env python3
"""
Simple TEI File Cleanup Script
1. Removes resp="Generated by Export-Script" attributes
2. Replaces <seg type="pc">...</seg> with <caesura/>
3. Adds comments for non-standard dates
4. Creates a log file with all non-standard dates found
"""

import re
from pathlib import Path
from lxml import etree
from datetime import datetime


def is_non_standard_date(when_value):
    """Check if a date is non-standard"""
    # Check for double hyphens (like 1951--58)
    if "--" in when_value:
        return True

    # Check for any character that's not a number or single hyphen
    if not re.match(r"^[0-9-]+$", when_value):
        return True

    return False


def clean_tei_file(filepath, date_log):
    """Clean a single TEI file and log non-standard dates"""
    try:
        # Parse the XML file
        parser = etree.XMLParser(remove_blank_text=True)
        tree = etree.parse(str(filepath), parser)
        root = tree.getroot()

        changes_made = 0

        # 1. Remove resp="Generated by Export-Script" attributes
        for elem in root.iter():
            resp_value = elem.get("resp")
            if resp_value and "Generated by Export-Script" in resp_value:
                del elem.attrib["resp"]
                changes_made += 1

        # 2. Replace <seg type="pc">...</seg> with <caesura/>
        TEI_NS = "http://www.tei-c.org/ns/1.0"
        XML_NS = "http://www.w3.org/XML/1998/namespace"

        for seg in root.findall(f".//{{{TEI_NS}}}seg[@type='pc']"):
            # Only replace if content is exactly "..."
            if seg.text and seg.text.strip() == "...":
                # Create new caesura element
                caesura = etree.Element(f"{{{TEI_NS}}}caesura")

                # Copy xml:id if it exists
                xml_id = seg.get(f"{{{XML_NS}}}id")
                if xml_id:
                    caesura.set(f"{{{XML_NS}}}id", xml_id)

                # Replace seg with caesura
                parent = seg.getparent()
                if parent is not None:
                    parent.replace(seg, caesura)
                    changes_made += 1

        # 3. Add comments for non-standard dates and log them
        for elem in root.iter():
            when_value = elem.get("when")
            if when_value and is_non_standard_date(when_value):
                # Log the non-standard date
                date_log.append(
                    {
                        "file": filepath.name,
                        "date": when_value,
                        "element": (
                            elem.tag.split("}")[-1] if "}" in elem.tag else elem.tag
                        ),
                    }
                )

                # Check if comment already exists
                parent = elem.getparent()
                if parent is not None:
                    # Look for existing comment
                    next_elem = elem.getnext()
                    if next_elem is None or not (
                        hasattr(next_elem, "tag")
                        and isinstance(next_elem, etree._Comment)
                        and "Date Attention needed" in str(next_elem)
                    ):

                        # Add comment after the element
                        comment = etree.Comment(" Date Attention needed ")
                        parent.insert(list(parent).index(elem) + 1, comment)
                        changes_made += 1

        # Write the file if any changes were made
        if changes_made > 0:
            tree_string = etree.tostring(root, encoding="utf-8")
            parser = etree.XMLParser(remove_blank_text=True)
            parsed = etree.fromstring(tree_string, parser)
            pretty = etree.tostring(
                parsed, pretty_print=True, encoding="utf-8", xml_declaration=True
            )

            with open(filepath, "wb") as f:
                f.write(pretty)

        return changes_made

    except Exception as e:
        return 0


def write_log_file(date_log, total_files, total_changes):
    """Write the log file with summary and detailed date information"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open("tei_cleanup_log.txt", "w", encoding="utf-8") as f:
        f.write("TEI CLEANUP LOG\n")
        f.write("=" * 50 + "\n")
        f.write(f"Generated: {timestamp}\n\n")

        # Summary
        f.write("SUMMARY\n")
        f.write("-" * 20 + "\n")
        f.write(f"Files processed: {total_files}\n")
        f.write(f"Total changes made: {total_changes}\n")
        f.write(f"Non-standard dates found: {len(date_log)}\n")
        f.write(
            f"Files with date issues: {len(set(entry['file'] for entry in date_log))}\n\n"
        )

        # Detailed log of non-standard dates
        if date_log:
            f.write("NON-STANDARD DATES FOUND\n")
            f.write("-" * 30 + "\n")

            # Group by file
            files_with_dates = {}
            for entry in date_log:
                filename = entry["file"]
                if filename not in files_with_dates:
                    files_with_dates[filename] = []
                files_with_dates[filename].append(entry)

            for filename in sorted(files_with_dates.keys()):
                f.write(f"\n{filename}:\n")
                for entry in files_with_dates[filename]:
                    f.write(
                        f"  - {entry['element']} element: when=\"{entry['date']}\"\n"
                    )
        else:
            f.write("NON-STANDARD DATES FOUND\n")
            f.write("-" * 30 + "\n")
            f.write("None\n")


def main():
    # Find all TEI files in current directory
    tei_files = list(Path(".").glob("*.tei.xml"))

    if not tei_files:
        print("No .tei.xml files found in the current directory.")
        return

    print(f"Processing {len(tei_files)} TEI files...")

    date_log = []
    total_changes = 0

    for filepath in sorted(tei_files):
        changes = clean_tei_file(filepath, date_log)
        total_changes += changes

    # Write log file
    write_log_file(date_log, len(tei_files), total_changes)

    print(f"Completed. Log written to: tei_cleanup_log.txt")


if __name__ == "__main__":
    main()
